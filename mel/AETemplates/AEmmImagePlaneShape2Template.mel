//
// Copyright (C) 2022, 2024 David Cattermole.
//
// This file is part of mmSolver.
//
// mmSolver is free software: you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// mmSolver is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with mmSolver.  If not, see <https://www.gnu.org/licenses/>.
// ---------------------------------------------------------------------
//
// Image plane shape node Template file.
//


source "AEmmNodeTemplateCommon";

global proc string AEmmImagePlaneShape2_slotAttrNameFromInteger(int $value)
{
    string $attr_name = "unknown";
    if ($value == 0) {
        $attr_name = "imageSequenceMain";
    } else if ($value == 1) {
        $attr_name = "imageSequenceAlternate1";
    } else if ($value == 2) {
        $attr_name = "imageSequenceAlternate2";
    } else if ($value == 3) {
        $attr_name = "imageSequenceAlternate3";
    }
    return $attr_name;
}


global proc string AEmmImagePlaneShape2_slotAttrNameFromOptionMenu(string $option_name)
{
    string $attr_name = "unknown";
    if ($option_name == "Main") {
        $attr_name = "imageSequenceMain";
    } else if ($option_name == "Alternate 1") {
        $attr_name = "imageSequenceAlternate1";
    } else if ($option_name == "Alternate 2") {
        $attr_name = "imageSequenceAlternate2";
    } else if ($option_name == "Alternate 3") {
        $attr_name = "imageSequenceAlternate3";
    }
    return $attr_name;
}


global proc int AEmmImagePlaneShape2_slotAttrValueFromOptionMenu(string $option_name)
{
    int $attr_value = -1;
    if ($option_name == "Main") {
        $attr_value = 0;
    } else if ($option_name == "Alternate 1") {
        $attr_value = 1;
    } else if ($option_name == "Alternate 2") {
        $attr_value = 2;
    } else if ($option_name == "Alternate 3") {
        $attr_value = 3;
    }
    return $attr_value;
}


global proc int AEmmImagePlaneShape2_getSlotValue(string $image_plane_shp)
{
    int $slot = `getAttr ($image_plane_shp + ".imageSequenceSlot")`;
    return $slot;
}


global proc AEmmImagePlaneShape2_setSlotValue(
    string $image_plane_shp,
    int $value)
{
    setAttr ($image_plane_shp + ".imageSequenceSlot") $value;
}


global proc AEmmImagePlaneShape2_browser(
    string $attr_name,
    string $image_plane_shp)
{
    int $slot = AEmmImagePlaneShape2_getSlotValue($image_plane_shp);
    string $slot_attr_name =
        AEmmImagePlaneShape2_slotAttrNameFromInteger($slot);

    string $cmd = "";
    $cmd = $cmd + "import mmSolver.tools.createimageplane.tool as tool;\n";
    $cmd = $cmd + "import mmSolver.tools.createimageplane.lib as lib;\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "image_seq = tool.prompt_user_for_image_sequence();\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "mm_ip_shp = \"" + $image_plane_shp + "\";\n";
    $cmd = $cmd + "attr_name = \"" + $attr_name + "\";\n";
    $cmd = $cmd + "current_slot_attr = \"" + $slot_attr_name + "\";\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "if image_seq:\n";
    $cmd = $cmd + "    if attr_name == current_slot_attr:\n";
    $cmd = $cmd + "        lib.set_image_sequence(\n";
    $cmd = $cmd + "            mm_ip_shp,\n";
    $cmd = $cmd + "            image_seq,\n";
    $cmd = $cmd + "            attr_name=attr_name\n";
    $cmd = $cmd + "        )\n";
    $cmd = $cmd + "    else:\n";
    $cmd = $cmd + "        maya.cmds.setAttr(\n";
    $cmd = $cmd + "            mm_ip_shp + '.' + attr_name,\n";
    $cmd = $cmd + "            image_seq,\n";
    $cmd = $cmd + "            type='string'\n";
    $cmd = $cmd + "        )\n";

    python($cmd);
}


global proc AEmmImagePlaneShape2_sequenceSlotChanged(
    string $attr_name,
    string $image_plane_shp,
    string $slot_option_value)
{
    string $slot_attr_name =
        AEmmImagePlaneShape2_slotAttrNameFromOptionMenu($slot_option_value);
    int $slot_attr_value =
        AEmmImagePlaneShape2_slotAttrValueFromOptionMenu($slot_option_value);

    AEmmImagePlaneShape2_setSlotValue($image_plane_shp, $slot_attr_value);

    string $cmd = "";
    $cmd = $cmd + "import mmSolver.tools.createimageplane.tool as tool;\n";
    $cmd = $cmd + "import mmSolver.tools.createimageplane.lib as lib;\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "mm_ip_shp = \"" + $image_plane_shp + "\";\n";
    $cmd = $cmd + "attr_name = \"" + $attr_name + "\";\n";
    $cmd = $cmd + "current_slot_attr = \"" + $slot_attr_name + "\";\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "image_seq = maya.cmds.getAttr(\n";
    $cmd = $cmd + "    mm_ip_shp + '.' + current_slot_attr) or ''\n";
    $cmd = $cmd + "if len(image_seq) == 0:\n";
    $cmd = $cmd + "    image_seq = lib.get_default_image_path();\n";
    $cmd = $cmd + "\n";
    $cmd = $cmd + "lib.set_image_sequence(\n";
    $cmd = $cmd + "    mm_ip_shp,\n";
    $cmd = $cmd + "    image_seq,\n";
    $cmd = $cmd + "    attr_name=current_slot_attr\n";
    $cmd = $cmd + ")\n";

    python($cmd);
}

global proc AEmmImagePlaneShape2_sequenceSlotNew(string $file_attr)
{
    string $nice_name = `attributeName -nice $file_attr`;

    setUITemplate -pst attributeEditorTemplate;
    rowLayout -nc 3 imageSeqSlotLayout;

    text -label $nice_name;
    optionMenu -alwaysCallChangeCommand imageSeqSlotField;

    menuItem -label "Main";
    menuItem -label "Alternate 1";
    menuItem -label "Alternate 2";
    menuItem -label "Alternate 3";

    setParent ..;
    setUITemplate -ppt;

    AEmmImagePlaneShape2_sequenceSlotReplace $file_attr;
}


global proc AEmmImagePlaneShape2_sequenceSlotReplace(string $file_attr)
{
    string $tokens[];
    tokenize($file_attr, ".", $tokens);
    if(size($tokens) < 1) {
        return;
    }

    // In MEL the '#1' text will be replaced by the chosen value from
    // the 'changeCommand'.
    string $cmd =
        "AEmmImagePlaneShape2_sequenceSlotChanged \"" + $tokens[1] + "\" " + $tokens[0] + " \"#1\";";

    optionMenu -edit -changeCommand $cmd imageSeqSlotField;
}


global proc AEmmImagePlaneShape2_imageSequenceNew(string $file_attr)
{
    string $nice_name = `attributeName -nice $file_attr`;

    setUITemplate -pst attributeEditorTemplate;

    rowLayout -nc 3 textureNameLayout;
    text -label $nice_name;
    textField textureNameField;
    symbolButton -image "navButtonBrowse.png" browser;
    setParent ..;

    setUITemplate -ppt;

    AEmmImagePlaneShape2_imageSequenceReplace $file_attr;
}


global proc AEmmImagePlaneShape2_imageSequenceReplace(string $file_attr)
{
    string $image_plane_shp[];
    tokenize($file_attr, ".", $image_plane_shp);
    if(size($image_plane_shp) < 1) {
        return;
    }

    string $attr_names[];
    tokenize ($file_attr, ".", $attr_names);

    string $cmd = "AEmmImagePlaneShape2_browser \"" + $attr_names[1] + "\" " + $image_plane_shp[0];

    connectControl -fileName textureNameField $file_attr;
    button -edit -command $cmd browser;
}


global proc AEmmImagePlaneShape2Template(string $nodeName)
{
    AEmmNodeShapeTemplateCommonBegin($nodeName);

    editorTemplate -beginLayout "Display" -collapse 0;
    editorTemplate -addControl "visibleToCameraOnly";
    editorTemplate -addSeparator;
    editorTemplate -addControl "colorGain";
    editorTemplate -addControl "colorExposure";
    editorTemplate -addControl "colorGamma";
    editorTemplate -addControl "colorSaturation";
    editorTemplate -addControl "colorSoftClip";
    editorTemplate -addControl "alphaGain";
    editorTemplate -addSeparator;
    editorTemplate -addControl "imageIgnoreAlpha";
    editorTemplate -addControl "displayChannel";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "Image Sequence" -collapse 0;

    editorTemplate
        -callCustom
        "AEmmImagePlaneShape2_sequenceSlotNew"
        "AEmmImagePlaneShape2_sequenceSlotReplace"
        "imageSequenceSlot";

    editorTemplate
        -callCustom
        "AEmmImagePlaneShape2_imageSequenceNew"
        "AEmmImagePlaneShape2_imageSequenceReplace"
        "imageSequenceMain";
    editorTemplate
        -callCustom
        "AEmmImagePlaneShape2_imageSequenceNew"
        "AEmmImagePlaneShape2_imageSequenceReplace"
        "imageSequenceAlternate1";
    editorTemplate
        -callCustom
        "AEmmImagePlaneShape2_imageSequenceNew"
        "AEmmImagePlaneShape2_imageSequenceReplace"
        "imageSequenceAlternate2";
    editorTemplate
        -callCustom
        "AEmmImagePlaneShape2_imageSequenceNew"
        "AEmmImagePlaneShape2_imageSequenceReplace"
        "imageSequenceAlternate3";

    editorTemplate -addSeparator;
    editorTemplate -addControl "imageWidth";
    editorTemplate -addControl "imageHeight";
    editorTemplate -addControl "imagePixelAspect";
    editorTemplate -addSeparator;
    editorTemplate -addControl "imageSequenceStartFrame";
    editorTemplate -addControl "imageSequenceEndFrame";
    editorTemplate -addSeparator;
    // TODO: Use mmColorIO results to allow users to manually give the
    // inputColorSpace.
    editorTemplate -addControl "inputColorSpace";
    editorTemplate -addSeparator;
    // TODO: Add radio button to choose what will connect to the
    // 'imageSequenceFrame' value? Options are:
    //  - Scene Time (time1)
    //  - Animation Curve
    //
    editorTemplate -addControl "imageSequenceFrame";
    editorTemplate -addControl "imageSequenceFirstFrame";
    editorTemplate -addControl "imageSequenceFrameOutput";
    editorTemplate -addSeparator;
    editorTemplate -addControl "imageFlip";
    editorTemplate -addControl "imageFlop";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "HUD" -collapse 0;
    editorTemplate -addControl "drawHud";
    editorTemplate -addSeparator;
    editorTemplate -addControl "drawCameraSize";
    editorTemplate -addControl "drawImageSize";
    // TODO: Add 'hudTextColor' - control the HUD text color.
    editorTemplate -endLayout;

    // editorTemplate -beginLayout "Image Cache" -collapse 1;
    // // TODO: Add controls to view and edit the image cache.
    // editorTemplate -endLayout;

    editorTemplate -beginLayout "Miscellaneous" -collapse 1;
    editorTemplate -addControl "meshResolution";
    editorTemplate -addControl "imageDefaultColor";  // Cannot be textured.
    editorTemplate -addControl "shaderIsTransparent";
    editorTemplate -endLayout;

    editorTemplate -beginLayout "Nodes" -collapse 1;
    editorTemplate -addControl "geometryNode";
    editorTemplate -addControl "cameraNode";
    editorTemplate -addControl "imagePlaneShapeNode";
    editorTemplate -endLayout;

    // Internals that we don't want the user to see.
    editorTemplate -suppress "imageSequencePadding";
    editorTemplate -suppress "cameraWidthInch";
    editorTemplate -suppress "cameraHeightInch";
    editorTemplate -suppress "lensHashCurrent";
    editorTemplate -suppress "lensHashPrevious";

    AEmmNodeShapeTemplateCommonEnd($nodeName);
}
